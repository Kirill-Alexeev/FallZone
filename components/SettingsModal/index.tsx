// components/SettingsScreen/SettingsModal.tsx (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import React from 'react';
import { FlatList, Modal, View } from 'react-native';
import { useGame } from '../../context/GameContext';
import CustomButton from '../ui/CustomButton';
import CustomText from '../ui/CustomText';
import { settingsModalStyles } from './SettingsModal.styles';

interface SettingsModalProps {
    visible: boolean;
    onClose: () => void;
}

interface StatItem {
    id: string;
    label: string;
    value: string;
    section: string;
}

const SettingsModal: React.FC<SettingsModalProps> = ({ visible, onClose }) => {
    const { gameData } = useGame();

    console.log('SettingsModal - gameData stats:', gameData.stats);

    const formatTime = (milliseconds: number) => {
        const seconds = Math.floor(milliseconds / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);

        if (hours > 0) {
            return `${hours}—á ${minutes % 60}–º`;
        } else if (minutes > 0) {
            return `${minutes}–º ${seconds % 60}—Å`;
        } else {
            return `${seconds}—Å`;
        }
    };

    const getDeathPercentage = (deathCount: number) => {
        const totalDeaths = gameData.stats.totalDeaths;
        if (totalDeaths === 0) return '0%';
        return `${((deathCount / totalDeaths) * 100).toFixed(1)}%`;
    };

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è FlatList
    const statsData: StatItem[] = [
        // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        { id: 'section1', label: '–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', value: '', section: 'header' },
        { id: 'totalGames', label: '–í—Å–µ–≥–æ –∏–≥—Ä', value: gameData.stats.totalGames.toString(), section: 'main' },
        { id: 'highScore', label: '–õ—É—á—à–∏–π —Ä–µ–∫–æ—Ä–¥', value: gameData.highScore.toString(), section: 'main' },
        { id: 'totalScore', label: '–í—Å–µ–≥–æ –æ—á–∫–æ–≤', value: gameData.stats.totalScore.toString(), section: 'main' },
        { id: 'totalCoins', label: '–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç', value: gameData.stats.totalCoinsEarned.toString(), section: 'main' },
        { id: 'totalTime', label: '–í—Ä–µ–º—è –≤ –∏–≥—Ä–µ', value: formatTime(gameData.stats.totalPlayTime), section: 'main' },
        { id: 'totalTaps', label: '–í—Å–µ–≥–æ —Ç–∞–ø–æ–≤', value: gameData.stats.totalTaps.toString(), section: 'main' },

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ—Ä—Ç–µ–π
        { id: 'section2', label: '–ü—Ä–∏—á–∏–Ω—ã —Å–º–µ—Ä—Ç–µ–π', value: '', section: 'header' },
        { id: 'totalDeaths', label: '–í—Å–µ–≥–æ —Å–º–µ—Ä—Ç–µ–π', value: gameData.stats.totalDeaths.toString(), section: 'deaths' },
        { id: 'cometDeaths', label: 'üí• –ö–æ–º–µ—Ç—ã', value: `${gameData.stats.deathsByObstacle.comet} (${getDeathPercentage(gameData.stats.deathsByObstacle.comet)})`, section: 'deaths' },
        { id: 'asteroidDeaths', label: 'ü™® –ê—Å—Ç–µ—Ä–æ–∏–¥—ã', value: `${gameData.stats.deathsByObstacle.asteroid} (${getDeathPercentage(gameData.stats.deathsByObstacle.asteroid)})`, section: 'deaths' },
        { id: 'droneDeaths', label: 'ü§ñ –î—Ä–æ–Ω—ã', value: `${gameData.stats.deathsByObstacle.drone} (${getDeathPercentage(gameData.stats.deathsByObstacle.drone)})`, section: 'deaths' },
        { id: 'wallDeaths', label: 'üß± –°—Ç–µ–Ω—ã', value: `${gameData.stats.deathsByObstacle.wall} (${getDeathPercentage(gameData.stats.deathsByObstacle.wall)})`, section: 'deaths' },

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤
        { id: 'section3', label: '–°–æ–±—Ä–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã', value: '', section: 'header' },
        { id: 'totalBonuses', label: '–í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤', value: gameData.stats.totalBonuses.toString(), section: 'bonuses' },
        { id: 'shieldBonuses', label: 'üõ°Ô∏è –©–∏—Ç—ã', value: gameData.stats.bonusesByType.shield.toString(), section: 'bonuses' },
        { id: 'magnetBonuses', label: 'üß≤ –ú–∞–≥–Ω–∏—Ç—ã', value: gameData.stats.bonusesByType.magnet.toString(), section: 'bonuses' },
        { id: 'slowmoBonuses', label: '‚è±Ô∏è –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ', value: gameData.stats.bonusesByType.slowmo.toString(), section: 'bonuses' },
        { id: 'coinBonuses', label: 'üí∞ –ú–æ–Ω–µ—Ç—ã', value: gameData.stats.bonusesByType.coin.toString(), section: 'bonuses' },

        // –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        { id: 'section4', label: '–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏', value: '', section: 'header' },
        { id: 'avgScore', label: '–°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç', value: gameData.stats.totalGames > 0 ? Math.round(gameData.stats.totalScore / gameData.stats.totalGames).toString() : '0', section: 'average' },
        { id: 'avgTime', label: '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è', value: gameData.stats.totalGames > 0 ? formatTime(gameData.stats.totalPlayTime / gameData.stats.totalGames) : '0—Å', section: 'average' },
        { id: 'avgTaps', label: '–¢–∞–ø–æ–≤/–∏–≥—Ä—É', value: gameData.stats.totalGames > 0 ? Math.round(gameData.stats.totalTaps / gameData.stats.totalGames).toString() : '0', section: 'average' },
    ];

    const renderStatItem = ({ item }: { item: StatItem }) => {
        if (item.section === 'header') {
            return (
                <View style={settingsModalStyles.sectionHeader}>
                    <CustomText style={settingsModalStyles.sectionTitle}>
                        {item.label}
                    </CustomText>
                </View>
            );
        }

        return (
            <View style={settingsModalStyles.statsRow}>
                <CustomText style={settingsModalStyles.statLabel}>{item.label}</CustomText>
                <CustomText style={settingsModalStyles.statValue}>{item.value}</CustomText>
            </View>
        );
    };

    return (
        <Modal
            visible={visible}
            animationType="slide"
            transparent={true}
            onRequestClose={onClose}
        >
            <View style={settingsModalStyles.modalOverlay}>
                <View style={settingsModalStyles.modalContent}>
                    <CustomText style={settingsModalStyles.title}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</CustomText>

                    <FlatList
                        data={statsData}
                        renderItem={renderStatItem}
                        keyExtractor={(item) => item.id}
                        style={settingsModalStyles.list}
                        showsVerticalScrollIndicator={true}
                    />

                    <CustomButton
                        title="–ó–∞–∫—Ä—ã—Ç—å"
                        onPress={onClose}
                        buttonStyle={settingsModalStyles.closeButton}
                        textStyle={settingsModalStyles.closeButtonText}
                    />
                </View>
            </View>
        </Modal>
    );
};

export default SettingsModal;